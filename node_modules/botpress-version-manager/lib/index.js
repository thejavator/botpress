'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (bp, module_directory) {

  var packageRoot = resolveModuleRootPath(module_directory);
  var packageJson = require(_path2.default.join(packageRoot, 'package.json'));

  var botpressRoot = process.cwd();
  var botpressPackageJson = require(_path2.default.join(botpressRoot, 'package.json'));

  var currentBotpressVersion = botpressPackageJson.version;
  var currentModuleVersion = packageJson.version;

  var version = packageJson['version-manager'];

  // there's nothing to check, return without any error
  if (!version || process.env.BOTPRESS_DISABLE_VERSION_MANAGER) {
    return true;
  }

  if (!_semver2.default.valid(currentBotpressVersion)) {
    bp.logger.warn('Invalid Botpress version: ' + currentBotpressVersion);
    return true;
  }

  if (_semver2.default.satisfies(currentBotpressVersion, version['botpress-check'])) {
    return true;
  }

  var v = function v(text) {
    return _chalk2.default.yellow.bold(text);
  };
  var u = function u(text) {
    return _chalk2.default.underline(text);
  };
  var c = function c(text) {
    return _chalk2.default.bgWhite.black(text);
  };

  var upgradeCmd = 'npm install -S botpress@' + version['botpress-update'];
  var downgradeCmd = 'npm install -S ' + packageJson.name + '@' + version['module-downgrade'];

  bp.logger.error('======= VERSION MANAGER =======');

  bp.logger.error('The current version of ' + packageJson.name + ' installed is ' + v(currentModuleVersion));
  bp.logger.error('However, your bot is using a local version of botpress version ' + v(currentBotpressVersion));
  bp.logger.error('Which is incompatible with this version of ' + packageJson.name + '. (botpress should satisfy \'' + version['botpress-check'] + '\')');
  bp.logger.error('To resolve this issue, you may either:\n');
  bp.logger.error(c(' A) ') + ' Migrate to a newer version of botpress --> ' + v(upgradeCmd));
  bp.logger.error(c(' B) ') + ' Try downgrading this module by a major version --> ' + v(downgradeCmd) + '\n');

  if (version.warn && version.warn.length > 0) {
    bp.logger.warn("If you decide to update botpress:", version.warn);
  }

  bp.logger.error('================================');

  throw new Error('Package ' + packageJson.name + ' is incompatible with your version of botpress');
};

function resolveModuleRootPath(entryPath) {
  var current = entryPath;
  while (current !== '/') {
    var lookup = _path2.default.join(current, 'package.json');
    if (_fs2.default.existsSync(lookup)) {
      return current;
    }

    current = _path2.default.resolve(_path2.default.join(current, '..'));
  }
  return null;
}
//# sourceMappingURL=index.js.map