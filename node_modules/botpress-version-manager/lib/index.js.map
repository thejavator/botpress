{"version":3,"sources":["../index.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,OAAO,OAAP,GAAiB,UAAC,EAAD,EAAK,gBAAL,EAA0B;;AAEzC,MAAM,cAAc,sBAAsB,gBAAtB,CAApB;AACA,MAAM,cAAc,QAAQ,eAAK,IAAL,CAAU,WAAV,EAAuB,cAAvB,CAAR,CAApB;;AAEA,MAAM,eAAe,QAAQ,GAAR,EAArB;AACA,MAAM,sBAAsB,QAAQ,eAAK,IAAL,CAAU,YAAV,EAAwB,cAAxB,CAAR,CAA5B;;AAEA,MAAM,yBAAyB,oBAAoB,OAAnD;AACA,MAAM,uBAAuB,YAAY,OAAzC;;AAEA,MAAM,UAAU,YAAY,iBAAZ,CAAhB;;AAEA;AACA,MAAI,CAAC,OAAD,IAAY,QAAQ,GAAR,CAAY,gCAA5B,EAA8D;AAC5D,WAAO,IAAP;AACD;;AAED,MAAI,CAAC,iBAAO,KAAP,CAAa,sBAAb,CAAL,EAA2C;AACzC,OAAG,MAAH,CAAU,IAAV,CAAe,+BAA+B,sBAA9C;AACA,WAAO,IAAP;AACD;;AAED,MAAI,iBAAO,SAAP,CAAiB,sBAAjB,EAAyC,QAAQ,gBAAR,CAAzC,CAAJ,EAAyE;AACvE,WAAO,IAAP;AACD;;AAED,MAAM,IAAI,SAAJ,CAAI;AAAA,WAAQ,gBAAM,MAAN,CAAa,IAAb,CAAkB,IAAlB,CAAR;AAAA,GAAV;AACA,MAAM,IAAI,SAAJ,CAAI;AAAA,WAAQ,gBAAM,SAAN,CAAgB,IAAhB,CAAR;AAAA,GAAV;AACA,MAAM,IAAI,SAAJ,CAAI;AAAA,WAAQ,gBAAM,OAAN,CAAc,KAAd,CAAoB,IAApB,CAAR;AAAA,GAAV;;AAEA,MAAM,0CAAwC,QAAQ,iBAAR,CAA9C;AACA,MAAM,mCAAiC,YAAY,IAA7C,SAAqD,QAAQ,kBAAR,CAA3D;;AAEA,KAAG,MAAH,CAAU,KAAV,CAAgB,iCAAhB;;AAEA,KAAG,MAAH,CAAU,KAAV,6BAA0C,YAAY,IAAtD,sBAA2E,EAAE,oBAAF,CAA3E;AACA,KAAG,MAAH,CAAU,KAAV,qEAAkF,EAAE,sBAAF,CAAlF;AACA,KAAG,MAAH,CAAU,KAAV,iDAA8D,YAAY,IAA1E,qCAA6G,QAAQ,gBAAR,CAA7G;AACA,KAAG,MAAH,CAAU,KAAV;AACA,KAAG,MAAH,CAAU,KAAV,CAAmB,EAAE,MAAF,CAAnB,oDAA2E,EAAE,UAAF,CAA3E;AACA,KAAG,MAAH,CAAU,KAAV,CAAmB,EAAE,MAAF,CAAnB,4DAAmF,EAAE,YAAF,CAAnF;;AAEA,MAAI,QAAQ,IAAR,IAAgB,QAAQ,IAAR,CAAa,MAAb,GAAsB,CAA1C,EAA6C;AAC3C,OAAG,MAAH,CAAU,IAAV,CAAe,mCAAf,EAAoD,QAAQ,IAA5D;AACD;;AAED,KAAG,MAAH,CAAU,KAAV,CAAgB,kCAAhB;;AAEA,QAAM,IAAI,KAAJ,CAAU,aAAa,YAAY,IAAzB,GAAgC,gDAA1C,CAAN;AACD,CAlDD;;AAoDA,SAAS,qBAAT,CAA+B,SAA/B,EAA0C;AACxC,MAAI,UAAU,SAAd;AACA,SAAO,YAAY,GAAnB,EAAwB;AACtB,QAAM,SAAS,eAAK,IAAL,CAAU,OAAV,EAAmB,cAAnB,CAAf;AACA,QAAI,aAAG,UAAH,CAAc,MAAd,CAAJ,EAA2B;AACzB,aAAO,OAAP;AACD;;AAED,cAAU,eAAK,OAAL,CAAa,eAAK,IAAL,CAAU,OAAV,EAAmB,IAAnB,CAAb,CAAV;AACD;AACD,SAAO,IAAP;AACD","file":"index.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport semver from 'semver'\nimport chalk from 'chalk'\n\nmodule.exports = (bp, module_directory) => {\n\n  const packageRoot = resolveModuleRootPath(module_directory)\n  const packageJson = require(path.join(packageRoot, 'package.json'))\n\n  const botpressRoot = process.cwd()\n  const botpressPackageJson = require(path.join(botpressRoot, 'package.json'))\n\n  const currentBotpressVersion = botpressPackageJson.version\n  const currentModuleVersion = packageJson.version\n\n  const version = packageJson['version-manager']\n\n  // there's nothing to check, return without any error\n  if (!version || process.env.BOTPRESS_DISABLE_VERSION_MANAGER) {\n    return true\n  }\n\n  if (!semver.valid(currentBotpressVersion)) {\n    bp.logger.warn('Invalid Botpress version: ' + currentBotpressVersion)\n    return true\n  }\n\n  if (semver.satisfies(currentBotpressVersion, version['botpress-check'])) {\n    return true\n  }\n\n  const v = text => chalk.yellow.bold(text)\n  const u = text => chalk.underline(text)\n  const c = text => chalk.bgWhite.black(text)\n\n  const upgradeCmd = `npm install -S botpress@${version['botpress-update']}`\n  const downgradeCmd = `npm install -S ${packageJson.name}@${version['module-downgrade']}`\n\n  bp.logger.error('======= VERSION MANAGER =======')\n\n  bp.logger.error(`The current version of ${packageJson.name} installed is ${v(currentModuleVersion)}`)\n  bp.logger.error(`However, your bot is using a local version of botpress version ${v(currentBotpressVersion)}`)\n  bp.logger.error(`Which is incompatible with this version of ${packageJson.name}. (botpress should satisfy '${version['botpress-check']}')`)\n  bp.logger.error(`To resolve this issue, you may either:\\n`)\n  bp.logger.error(`${c(' A) ')} Migrate to a newer version of botpress --> ${v(upgradeCmd)}`)\n  bp.logger.error(`${c(' B) ')} Try downgrading this module by a major version --> ${v(downgradeCmd)}\\n`)\n\n  if (version.warn && version.warn.length > 0) {\n    bp.logger.warn(\"If you decide to update botpress:\", version.warn)\n  }\n\n  bp.logger.error('================================')\n\n  throw new Error('Package ' + packageJson.name + ' is incompatible with your version of botpress')\n}\n\nfunction resolveModuleRootPath(entryPath) {\n  let current = entryPath\n  while (current !== '/') {\n    const lookup = path.join(current, 'package.json')\n    if (fs.existsSync(lookup)) {\n      return current\n    }\n\n    current = path.resolve(path.join(current, '..'))\n  }\n  return null\n}\n"]}