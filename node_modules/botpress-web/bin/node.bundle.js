module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _util = __webpack_require__(2);
	
	var _util2 = _interopRequireDefault(_util);
	
	var _lodash = __webpack_require__(3);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _bluebird = __webpack_require__(4);
	
	var _bluebird2 = _interopRequireDefault(_bluebird);
	
	var _umm = __webpack_require__(5);
	
	var _umm2 = _interopRequireDefault(_umm);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var outgoingTypes = ['text'];
	
	var parseTyping = function parseTyping(msg) {
	  if (msg.raw && !!msg.raw.typing) {
	    if (isNaN(msg.raw.typing)) {
	      return 1000;
	    } else {
	      return Math.max(msg.raw.typing, 500);
	    }
	  }
	
	  return false;
	};
	
	var outgoingMiddleware = function outgoingMiddleware(bp) {
	  return function () {
	    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(event, next) {
	      var extractSocketId, user, msg, typing;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (!(event.platform !== 'web')) {
	                _context.next = 2;
	                break;
	              }
	
	              return _context.abrupt('return', next());
	
	            case 2:
	              if (_lodash2.default.includes(outgoingTypes, event.type)) {
	                _context.next = 4;
	                break;
	              }
	
	              return _context.abrupt('return', next('Unsupported event type: ' + event.type));
	
	            case 4:
	
	              // TODO Currently this will broadcast to all sockets
	              // TODO We must target a single socket / client
	
	              extractSocketId = function extractSocketId() {
	                var to = event.raw && event.raw.to || event.user;
	
	                if (to && to.id) {
	                  to = to.id;
	                }
	
	                if (!to || !to.length) {
	                  next(new Error("Could not find who to send this message to: " + _util2.default.inspect(event)));
	                }
	
	                if (to.indexOf(':') >= 0) {
	                  to = to.split(':')[1];
	                }
	
	                if (to.indexOf('+') >= 0) {
	                  to = to.split('+')[0];
	                }
	
	                return to;
	              };
	
	              _context.next = 7;
	              return getOrCreateUser(bp, extractSocketId());
	
	            case 7:
	              user = _context.sent;
	              msg = Object.assign({}, event, {
	                from: 'bot',
	                bp: null,
	                __userId: user.id,
	                __socketId: user && user.socketId // send back only to the sender
	              });
	              typing = parseTyping(msg);
	
	              if (!typing) {
	                _context.next = 14;
	                break;
	              }
	
	              bp.events.emit('modules.web.typing', msg);
	              _context.next = 14;
	              return _bluebird2.default.delay(typing);
	
	            case 14:
	
	              bp.events.emit('modules.web.message', msg);
	
	              if (msg._promise && msg._resolve) {
	                msg._resolve();
	              }
	
	            case 16:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, undefined);
	    }));
	
	    return function (_x, _x2) {
	      return _ref.apply(this, arguments);
	    };
	  }();
	};
	
	var users = {};
	var usersCount = 0;
	
	var getOrCreateUser = function () {
	  var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(bp, socketId) {
	    var uniqueId;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            if (users[socketId]) {
	              _context2.next = 5;
	              break;
	            }
	
	            uniqueId = socketId + '+' + ('' + Math.random()).substr(2, 5);
	
	            users[socketId] = {
	              first_name: 'Anonymous',
	              last_name: '#' + usersCount++,
	              profile_pic: 'http://350cr.blogs.brynmawr.edu/files/2013/05/anonymous.jpg', // TODO Remove that
	              socketId: socketId,
	              id: uniqueId,
	              platform: 'web'
	            };
	
	            _context2.next = 5;
	            return bp.db.saveUser(users[socketId]);
	
	          case 5:
	            return _context2.abrupt('return', users[socketId]);
	
	          case 6:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined);
	  }));
	
	  return function getOrCreateUser(_x3, _x4) {
	    return _ref2.apply(this, arguments);
	  };
	}();
	
	var getUserById = function getUserById(userId) {
	  return _lodash2.default.find(users, { id: userId });
	};
	
	var startNewSession = function startNewSession(bp, socketId) {
	  delete users[socketId];
	  return getOrCreateUser(bp, socketId);
	};
	
	module.exports = {
	
	  config: {},
	
	  init: function () {
	    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(bp, configurator) {
	      return regeneratorRuntime.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              bp.middlewares.register({
	                name: 'web.sendMessages',
	                type: 'outgoing',
	                order: 100,
	                handler: outgoingMiddleware(bp),
	                module: 'botpress-web',
	                description: 'Sends out messages that targets platform = web.' + ' This middleware should be placed at the end as it swallows events once sent.'
	              });
	
	              (0, _umm2.default)(bp); // Initialize UMM
	
	            case 2:
	            case 'end':
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));
	
	    function init(_x5, _x6) {
	      return _ref3.apply(this, arguments);
	    }
	
	    return init;
	  }(),
	
	  ready: function () {
	    var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(bp, configurator) {
	      var _this = this;
	
	      var config;
	      return regeneratorRuntime.wrap(function _callee6$(_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              _context6.next = 2;
	              return configurator.loadAll();
	
	            case 2:
	              config = _context6.sent;
	
	
	              bp.events.on('modules.web.message', function () {
	                var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(message, from, metadata) {
	                  var user;
	                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                    while (1) {
	                      switch (_context4.prev = _context4.next) {
	                        case 0:
	                          if (message) {
	                            _context4.next = 2;
	                            break;
	                          }
	
	                          return _context4.abrupt('return');
	
	                        case 2:
	                          if (!(_lodash2.default.get(message, 'from') === 'bot')) {
	                            _context4.next = 4;
	                            break;
	                          }
	
	                          return _context4.abrupt('return');
	
	                        case 4:
	                          if (metadata && metadata.socketId) {
	                            _context4.next = 6;
	                            break;
	                          }
	
	                          return _context4.abrupt('return');
	
	                        case 6:
	                          _context4.next = 8;
	                          return getOrCreateUser(bp, metadata.socketId);
	
	                        case 8:
	                          user = _context4.sent;
	
	
	                          // TODO Support more types like attachment
	                          bp.middlewares.sendIncoming({
	                            platform: 'web',
	                            type: 'message',
	                            user: user,
	                            text: message.text,
	                            raw: message
	                          });
	
	                        case 10:
	                        case 'end':
	                          return _context4.stop();
	                      }
	                    }
	                  }, _callee4, _this);
	                }));
	
	                return function (_x9, _x10, _x11) {
	                  return _ref5.apply(this, arguments);
	                };
	              }());
	
	              bp.events.on('modules.web.new_session', function () {
	                var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(message, from, metadata) {
	                  var user, event;
	                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
	                    while (1) {
	                      switch (_context5.prev = _context5.next) {
	                        case 0:
	                          if (metadata && metadata.socketId) {
	                            _context5.next = 2;
	                            break;
	                          }
	
	                          return _context5.abrupt('return');
	
	                        case 2:
	                          _context5.next = 4;
	                          return startNewSession(bp, metadata.socketId);
	
	                        case 4:
	                          user = _context5.sent;
	                          event = {
	                            from: 'bot',
	                            userId: user.id,
	                            __socketId: user && user.socketId // send back only to the sender
	                          };
	
	
	                          bp.events.emit('modules.web.session_started', event);
	
	                        case 7:
	                        case 'end':
	                          return _context5.stop();
	                      }
	                    }
	                  }, _callee5, _this);
	                }));
	
	                return function (_x12, _x13, _x14) {
	                  return _ref6.apply(this, arguments);
	                };
	              }());
	
	            case 5:
	            case 'end':
	              return _context6.stop();
	          }
	        }
	      }, _callee6, this);
	    }));
	
	    function ready(_x7, _x8) {
	      return _ref4.apply(this, arguments);
	    }
	
	    return ready;
	  }()
	};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = require("util");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = require("lodash");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	module.exports = require("bluebird");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _util = __webpack_require__(2);
	
	var _util2 = _interopRequireDefault(_util);
	
	var _lodash = __webpack_require__(3);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _bluebird = __webpack_require__(4);
	
	var _bluebird2 = _interopRequireDefault(_bluebird);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// TODO Extract this logic directly to botpress's UMM
	function getUserId(event) {
	  var userId = _lodash2.default.get(event, 'user.id') || _lodash2.default.get(event, 'user.userId') || _lodash2.default.get(event, 'userId') || _lodash2.default.get(event, 'raw.from') || _lodash2.default.get(event, 'raw.userId') || _lodash2.default.get(event, 'raw.user.id');
	
	  if (!userId) {
	    throw new Error('Could not find userId in the incoming event.');
	  }
	
	  return userId;
	}
	
	function PromisifyEvent(event) {
	  if (!event._promise) {
	    event._promise = new _bluebird2.default(function (resolve, reject) {
	      event._resolve = resolve;
	      event._reject = reject;
	    });
	  }
	
	  return event;
	}
	
	function _processOutgoing(_ref) {
	  var event = _ref.event,
	      blocName = _ref.blocName,
	      instruction = _ref.instruction;
	
	  var ins = Object.assign({}, instruction); // Create a shallow copy of the instruction
	
	  ////////
	  // PRE-PROCESSING
	  ////////
	
	  var optionsList = ['typing'];
	
	  var options = _lodash2.default.pick(instruction, optionsList);
	
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;
	
	  try {
	    for (var _iterator = optionsList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var prop = _step.value;
	
	      delete ins[prop];
	    }
	
	    /////////
	    /// Processing
	    /////////
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }
	
	  if (!_lodash2.default.isNil(instruction.text)) {
	    var user = getUserId(event);
	
	    return PromisifyEvent({
	      platform: 'web',
	      type: 'text',
	      user: { id: user },
	      raw: Object.assign({ to: user, message: instruction.text }, options),
	      text: instruction.text
	    });
	  }
	
	  ////////////
	  /// POST-PROCESSING
	  ////////////
	
	  // Nothing to post-process yet
	
	  ////////////
	  /// INVALID INSTRUCTION
	  ////////////
	
	  var strRep = _util2.default.inspect(instruction, false, 1);
	  throw new Error('Unrecognized instruction on Web in bloc \'' + blocName + '\': ' + strRep);
	}
	
	module.exports = function (bp) {
	  var _$at = _lodash2.default.at(bp, ['umm', 'umm.registerConnector']),
	      _$at2 = _slicedToArray(_$at, 2),
	      umm = _$at2[0],
	      registerConnector = _$at2[1];
	
	  umm && registerConnector && registerConnector({
	    platform: 'web',
	    processOutgoing: function processOutgoing(args) {
	      return _processOutgoing(Object.assign({}, args, { bp: bp }));
	    },
	    templates: []
	  });
	};

/***/ })
/******/ ]);
//# sourceMappingURL=node.bundle.js.map